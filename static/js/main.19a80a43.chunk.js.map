{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","highlight","onClick","value","Move","msg","index","concat","Math","floor","move","moveCoordinates","row","column","stepNumber","Board","i","_this","this","key","squares","winningLine","indexOf","rows","currentIndex","rowSquares","j","push","renderSquare","renderBoard","React","Component","Game","_this2","Object","C_dev_tic_react_toe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","C_dev_tic_react_toe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_dev_tic_react_toe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","xIsNext","slice","length","calculateWinner","setState","step","status","_this3","current","winner","moves","map","moveIndex","desc","jumpTo","line","handleClick","lines","_lines$i","C_dev_tic_react_toe_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.19a80a43.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n  \r\nfunction Square(props) {\r\n  return (\r\n    <button className={!props.highlight ? \"square\" : \"square highlight\"} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Move(props) {\r\n  const msg = 'Go to move #' + props.index + ` (${Math.floor(props.move.moveCoordinates.row)}, ${Math.floor(props.move.moveCoordinates.column)})`;\r\n  return props.index === props.stepNumber \r\n  ? (<b>{msg}</b>) \r\n  : msg\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n          <Square\r\n            key={i} \r\n            value={this.props.squares[i]}\r\n            highlight={this.props.winningLine && this.props.winningLine.indexOf(i) !== -1} // Check if square is part of a winning line (to highlight it) \r\n            onClick={() => this.props.onClick(i)} \r\n          />\r\n    );\r\n  }\r\n\r\n  renderBoard() {\r\n    let rows = [];\r\n    let currentIndex = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n      let rowSquares = [];\r\n      for (let j = 0; j < 3; j++) {\r\n        rowSquares.push(this.renderSquare(currentIndex++));\r\n      }\r\n      rows.push(<div className=\"board-row\">{rowSquares}</div>)\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  render() {\r\n    return this.renderBoard();\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        moveCoordinates: {\r\n          row: null,\r\n          column: null\r\n        }\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    }\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        moveCoordinates: {\r\n          row: Math.floor(i / 3) + 1,\r\n          column: Math.floor(i % 3) + 1\r\n        }\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    })\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((move, moveIndex) => {\r\n      const desc = moveIndex \r\n      ? <Move move={move} index={moveIndex} stepNumber={this.state.stepNumber}/> \r\n      : 'Go to game start';\r\n      return (\r\n        <li key={moveIndex}>\r\n          <button onClick={() => this.jumpTo(moveIndex)}>{desc}</button>\r\n        </li>\r\n      )\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner.winner;\r\n    } else if (this.state.stepNumber === 9) { // No more moves to play\r\n      status = 'Draw!';\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares={current.squares}\r\n            winningLine={winner ? winner.line : null} \r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        winner: squares[a],\r\n        line: lines[i]\r\n      };\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n  "],"sourceRoot":""}